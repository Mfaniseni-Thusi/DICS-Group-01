## Use these commands to run:
cd Rust
cargo run
python main.py

## Rust code explanation

For simplification, the use of .par_iter() in Rayon allows automatic parallel iteration over a data collection, distributing work across available CPU cores. This approach abstracts away the explicit management of thread pools or core allocation, letting the library efficiently utilize the system's concurrency capabilities based on runtime conditions and workload characteristics. The number of cores are directly related to how many .par_iter()'s are used. 

The timings of the different functions are recorded into a CSV file, which is then analysed using a python script called main.py. This python script will compute the percentages (quicker or slower) and it will create a graph to better visualise the data.

---------- 2-D implementation ----------

#### `multiply_sequential(&self, other: &Matrix) -> Matrix`

This function carries out the multiplication of two 2D matrices using the standard sequential approach. It systematically computes the product by iterating over each row of the first matrix and each column of the second matrix, accumulating the sum of the products of the corresponding elements.

#### `rank2_tensor_mult_thread(&self, other: &Matrix, num_cores: usize) -> Matrix`

This function implements parallel matrix multiplication for 2D matrices. It accepts the number of threads (or cores) as an argument, allowing the multiplication task to be divided and executed across multiple threads concurrently. This parallelism aims to leverage multi-core processors to improve the computation time over the sequential approach.

---------- 3-D implementation ----------

#### `multiply_sequential(&self, other: &Matrix3D) -> Matrix3D`

This method extends the sequential multiplication to 3D matrices, which are conceptualized as a stack of 2D matrices (layers). It iterates through each layer, applying the same sequential 2D matrix multiplication method to each pair of corresponding layers from the two 3D matrices.

#### `rank3_tensor_mult_thread(&self, other: &Matrix3D, num_threads: usize) -> Matrix3D`

This function enables parallel multiplication of 3D matrices. It takes advantage of a specified number of threads to distribute the computation of the 3D matrix multiplication across those threads. This method allows each layer of the 3D matrix multiplication to be processed in parallel, potentially reducing computation time significantly, especially for large datasets and on systems with a high number of available cores.